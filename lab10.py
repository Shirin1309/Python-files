# -*- coding: utf-8 -*-
"""lab10.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1aJWhhgZ_sm3fGxnatzBHM62gS1w-QvMZ
"""

#1. Write a program to demonstrate ZeroDivisionError and ValueError
 
try:
  a=int(input("Enter a number:"))
  b=4
  print("%d divided by %d is",b/a)
except ValueError as ve:
  print("value error:",ve)
except ZeroDivisionError as zde:
  print("Denominator is zero error:",zde)

#2. Write a program that accepts an integer from user and raises ValueError with argument ‘Abnormal Condition’, if the reading is
#not within 90 – 120.
 
try:
  a=int(input("Enter a number:"))
  if a<90 or a>120:
    raise ValueError("Abnormal Condition")
  print(a)
except ValueError as ve:
  print(ve)
finally:
  print("it happens")

#3. Write a custom exception which is raised if user entered login credentials remain invalid.
 
class LogEx(Exception):pass
try:
  a=int(input("Enter pin number:"))
  b=input("Enter User name:")
  if b!="shirin":
    raise LogEx("invalid username")
except ValueError as ve:
  print("Only integers:////invalid!!",ve)
except LogEx as le:
  print(le)
else:
  print("Successfully login!!!!!!!!!!")

#4. Write example program to demonstrate Chained exception, re-raised exception and AssertError (self-study) in Python.
try:
  x=int(input("Enter a number:"))
  y=int(input("Enter a number:"))
  assert y!=0 , "invalid operation"
  if x<0 and y<0:
    raise ValueError("Inappropriate option")
  print(x/y)
except AssertionError as ae:
  print(ae)
except ValueError as ve:
  print("Reraised Exception:",ve)

def f1():
  try:
    print("inner bnlock")
    n = int(input('Enter an integer: '))
    m=int(input('Enter an integer: '))
    print(n/m)
  except ZeroDivisionError as ze:
    print(ze)
  except ValueError as ve:
    print("value Error:",ve)
    

try:
  f1()
  print("Outer block")
except EOFError as ee:
  print(ee)